@model K94Warriors.Models.DogProfile
@using K94Warriors.Core.HtmlHelperExtensions

@{
    ViewBag.Title = "CreateOrUpdateDog";
}

<div class="well">
    <h1>Add New Dog</h1>
    <div>Adding a new dog to the system allows you to manage its medical records, add notes and view events related to the dog.</div>
</div>

@using (Html.BeginForm("Create", "Dog", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary()
    
    <div class="form-group">
        <label>Name</label>
        @Html.K9TextBoxFor(t => t.Name, "Dog Name")
        @Html.ValidationMessageFor(t => t.Name, "", new { @class = "help-block" })
    </div>
    <div class="form-group">
        <label>Gender</label>
        @Html.EnumDropDownListFor(t => t.Gender, "Select a gender...")
        @Html.ValidationMessageFor(t => t.Gender, "", new { @class = "help-block" })
    </div>

    <div class="form-group">
        <label>Breed</label>
        @Html.K9TextBoxFor(t => t.Breed, "Dog Breed")
        @Html.ValidationMessageFor(t => t.Breed, "", new { @class = "help-block" })
    </div>

    <div class="form-group">
        <label>Birth Year</label>
        @Html.K9TextBoxFor(t => t.BirthYear, "Birth Year")
        @Html.ValidationMessageFor(t => t.BirthYear, "", new { @class = "help-block" })
    </div>

    <div class="form-group">
        <label>Color</label>
        @Html.K9TextBoxFor(t => t.Color, "Dog Color")
        @Html.ValidationMessageFor(t => t.Color, "", new { @class = "help-block" })
    </div>
    
    <div class="form-group">
        <label>Health Condition</label>
@*        <textarea class="form-control" name="HealthCondition" placeholder="Health Condition" rows="4"></textarea>*@
        @Html.TextAreaFor(t => t.HealthCondition, new { rows = "4", placeholder = "Health Condition", @class="form-control"})
        @Html.ValidationMessageFor(t => t.HealthCondition, "", new { @class = "help-block" })
    </div>

    <div class="form-group">
        <label>Picked-Up Date (Optional) </label>
        <input type="date" class="form-control input-lg" name="PickedUpDate" data-value="@(Model.PickedUpDate.HasValue ? Model.PickedUpDate.Value.ToString("yyyy-MM-dd") : null)">
        @Html.ValidationMessageFor(t => t.PickedUpDate, "", new { @class = "help-block" })
    </div>

    <div class="checkbox">
        <label>
            @Html.CheckBoxFor(t => t.IsFixed)
            Is Dog Fixed?
        </label>
        @Html.ValidationMessageFor(t => t.IsFixed, "", new { @class = "help-block" })
    </div>
    <div class="checkbox">
        <label>
            @Html.CheckBoxFor(t => t.IsApproved)
            Is Dog Approved?
        </label>
        @Html.ValidationMessageFor(t => t.IsApproved, "", new { @class = "help-block" })
    </div>
    
    <div class="form-group">
        <label>Upload an Image</label>
        <input type="file" name="images" class="form-control input-lg" title="Upload an image..." accept="image/*" multiple />
    </div>


    <p>
        <button type="submit" class="btn">Create</button>
    </p>
}